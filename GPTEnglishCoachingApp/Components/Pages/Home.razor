@page "/"
@using GPTEnglishCoachingApp.Models;
@using Azure.AI.OpenAI;
@using Microsoft.Extensions.Options
@using System.Text.Json
@inject OpenAIClient openAIClient;
@inject ISnackbar Snackbar
@inject IOptions<AppConfig> appConfig

 <MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Setup" MaxHeight="1000" @bind-IsExpanded="isSetupAreaOpen" >
                <MudStack Row="true">
                    <MudItem xs="7" sm="7" md="7">
                        <MudSelect T="string" @bind-Value="SelectedScene" Label="Scene" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in FreeChatScenes.SceneList)
                            {
                                <MudSelectItem Value="@item.SceneId">
                                    @item.SceneName
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="3" sm="3" md="3">
                        <MudSelect T="string" @bind-Value="SelectedFeedbackLang" Label="Feedback Langage" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            <!-- LanguageListの値を選択肢として表示 -->
                            @foreach (var item in FeedbackLang.LanguageList)
                            {
                                <MudSelectItem Value="@item.Key">
                                    @item.Value
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem  xs="2" sm="2" md="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large" OnClick="InitializeChatAsync">Start chatting</MudButton>
                    </MudItem>
                </MudStack>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>


    <MudItem xs="6" sm="6" md="6">
        <MudProgressLinear Indeterminate="@isProcessing" Color="Color.Dark" />
        <!-- chat are  https://github.com/iammukeshm/BlazorChat/blob/master/BlazorChat/Client/Pages/Chat.razor-->
        <MudPaper Elevation="25" Class="pa-4 flex-grow-1">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6">Chat</MudText>
            </MudToolBar>
            <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
                @foreach (var message in messages)
                {
                    if(message.Role == ChatRole.User)
                    {
                        <div class="d-flex flex-row my-1">
                            <div>
                                <MudText Typo="Typo.body1" Style="@($"padding:15px; background-color:{Colors.Teal.Darken2}; border-radius:5px; margin-top:5px;")">@(((ChatRequestUserMessage)message).Content)</MudText>
                            </div>
                        </div>
                    } else if(message.Role == ChatRole.Assistant)
                    {
                        <div class="d-flex flex-row my-1">
                            <div>
                                <MudText Typo="Typo.body1" Style=" padding: 15px; background-color:var(--mud-palette-background-grey); border-radius:5px; margin-top:5px;">@(((ChatRequestAssistantMessage)message).Content)</MudText>
                            </div>
                        </div>
                    }
                }
            </div>
            <MudPaper Elevation="25" Class="d-flex flex-row" Style="">
                <MudTextField  T="string" @bind-Value="CurrentMessage" Placeholder="Enter your message..." Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Send" OnAdornmentClick="SubmitChatAsync" />
            </MudPaper>
        </MudPaper>
    </MudItem>



    <MudItem xs="6" sm="6" md="6">
        <MudPaper Elevation="25" Class="pa-4 flex-grow-1">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h6">Feedback</MudText>
            </MudToolBar>
            <MudStack class="px-4" style="max-height:44vh;min-height:44vh; overflow:scroll;" >
                @foreach (var feedback in feedbackList)
                {
                    <FeedbackItem Type="feedback.Type" Content="@feedback.Content" />
                }
            </MudStack>
            <MudDivider />
            <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Right" Width="300px" Height="300px"
                    InputData="@AggregatedFeedback" InputLabels="@AggregatedFeedbackLabels">
            </MudChart>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    public bool isProcessing = false;
    private string SelectedScene = FreeChatScenes.SceneList.First().SceneId;
    private string SelectedFeedbackLang = FeedbackLang.LanguageList.First().Key;
    private bool isSetupAreaOpen = true;
    private string CurrentMessage = string.Empty;

    private List<ChatRequestMessage> messages = new List<ChatRequestMessage>();

    private List<Feedback> feedbackList = new List<Feedback>();

    private double[] AggregatedFeedback{
        get => feedbackList.GroupBy(f => f.Type).Select(g => (double)g.Count()).ToArray();
    }

    private string[] AggregatedFeedbackLabels{
        get => feedbackList.GroupBy(f => f.Type).Select(g => g.Key.ToString()).ToArray();
    }
    
    private async Task InitializeChatAsync()
    {
        isProcessing = true;
        messages.Clear();

        try{
            var systemPrompt = FreeChat.GetSystemPrompt(SelectedScene, SelectedFeedbackLang);

            messages.Add(new ChatRequestSystemMessage(systemPrompt));
            await CallChatCompletionAsync();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            isProcessing = false;
        }
    }

    private async Task SubmitChatAsync()
    {
        isProcessing = true;
        // messageにChatRequestSystemMessage型の値が含まれているかをチェックする
        if (!messages.Any(m => m is ChatRequestSystemMessage))
        {
            Snackbar.Add("Select scene, feedback langage and click 'Start Chatting' button first.", Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(CurrentMessage))
        {
            Snackbar.Add("Please input your message.", Severity.Error);
        }

        try{
            messages.Add(new ChatRequestUserMessage(CurrentMessage));
            CurrentMessage = string.Empty;
            await CallChatCompletionAsync();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            isProcessing = false;
        }
    }

    private async Task CallChatCompletionAsync()
    {
        var chatOptions = new ChatCompletionsOptions(appConfig.Value.OpenAIDeployment, messages)
        {
            ResponseFormat = ChatCompletionsResponseFormat.JsonObject
        };

        var response = await openAIClient.GetChatCompletionsAsync(chatOptions);
        var choice = response.Value.Choices.First();

        if (choice.FinishReason == CompletionsFinishReason.Stopped)
        {
            var FreeChatResponse = JsonSerializer.Deserialize<FreeChatResponse>(choice.Message.Content);

            messages.Add(new ChatRequestAssistantMessage(FreeChatResponse?.Message));

            if (FreeChatResponse?.Feedback != null)
            {
                FreeChatResponse.Feedback.ForEach(f => f.TargetMsgIndex = messages.Count - 1);
                feedbackList.AddRange(FreeChatResponse.Feedback);
            }
        }
        isProcessing = false;
    }
}
